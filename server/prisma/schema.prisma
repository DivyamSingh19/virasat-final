generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Branch {
  COMPUTER_ENGINEERING
  INFORMATION_TECHNOLOGY
  CSE_AI_ML
  ELECTRONICS_COMPUTER_SCIENCE
  MECHATRONICS_ENGINEERING
  HUMANITIES_BASIC_SCIENCES
  BACHELOR_OF_FINE_ART
}

model Student {
  id             String       @id @default(uuid())
  username       String       @unique
  email          String       @unique
  password       String
  prn_number     String
  branch         Branch
  graduationYear Int          // Stores the expected year of graduation
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  bio            String?      @db.VarChar(600) // Bio with max 600 characters
  githubProfile  String?      // GitHub profile link
  linkedinProfile String?     // LinkedIn profile link
  phoneNumber    String?      @unique // Phone number (optional but unique)
  
  skills         String[]     @db.VarChar(5)  // Max 5 skills
  interests      String[]     @db.VarChar(5)  // Max 5 interests

  degree         Degree       // Enum (BE, ME)

  posts          Post[]
  forums         Forum[]
  comments       Comment[]
  sentChats      Chat[]       @relation("StudentSenderChats")
  receivedChats  Chat[]       @relation("StudentReceiverChats")
  experiences    Experience[] // Back-relation to Experience
}

enum Degree {
  BE
  ME
}


model Alumni {
  id              String       @id @default(uuid())
  username        String       @unique
  email           String       @unique
  password        String
  branch          Branch
  graduationYear  Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  bio             String?      @db.VarChar(600) // Bio with max 600 characters
  githubProfile   String?      // GitHub profile link
  linkedinProfile String?      // LinkedIn profile link
  phoneNumber     String?      @unique // Phone number (optional but unique)
  
  skills          String[]     @db.VarChar(5)  // Max 5 skills
  interests       String[]     @db.VarChar(5)  // Max 5 interests

  degree          Degree       // Enum (BE, ME)

  posts           Post[]
  forums          Forum[]
  jobs            Job[]
  comments        Comment[]
  sentChats       Chat[]       @relation("AlumniSenderChats")
  receivedChats   Chat[]       @relation("AlumniReceiverChats")
  experiences     Experience[] // Back-relation to Experience
}

 

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  forums    Forum[]
  events    Event[]
  comments  Comment[]
}

model Post {
  id            String   @id @default(uuid())
  title         String
  description   String
  featuredImage String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  studentId     String?
  alumniId      String?
  adminId       String?

  student       Student? @relation(fields: [studentId], references: [id])
  alumni        Alumni?  @relation(fields: [alumniId], references: [id])
  admin         Admin?   @relation(fields: [adminId], references: [id])

  comments      Comment[]
}

model Forum {
  id            String   @id @default(uuid())
  title         String
  content       String
  featuredImage String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  studentId     String?
  alumniId      String?
  adminId       String?

  student       Student? @relation(fields: [studentId], references: [id])
  alumni        Alumni?  @relation(fields: [alumniId], references: [id])
  admin         Admin?   @relation(fields: [adminId], references: [id])

  comments      Comment[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  company     String
  location    String
  salary      String
  expired     Boolean  @default(false)

  postedById  String
  postedBy    Alumni   @relation(fields: [postedById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  postId      String?
  forumId     String?

  studentId   String?
  alumniId    String?
  adminId     String?

  post        Post?    @relation(fields: [postId], references: [id])
  forum       Forum?   @relation(fields: [forumId], references: [id])

  student     Student? @relation(fields: [studentId], references: [id])
  alumni      Alumni?  @relation(fields: [alumniId], references: [id])
  admin       Admin?   @relation(fields: [adminId], references: [id])
}

model Chat {
  id                  String   @id @default(uuid())
  message             String   // Encrypted message
  createdAt           DateTime @default(now())

  senderStudentId     String?   
  receiverAlumniId    String?  
  senderAlumniId      String?   
  receiverStudentId   String?  

  senderStudent       Student? @relation("StudentSenderChats", fields: [senderStudentId], references: [id])
  receiverAlumni      Alumni?  @relation("AlumniReceiverChats", fields: [receiverAlumniId], references: [id])
  senderAlumni        Alumni?  @relation("AlumniSenderChats", fields: [senderAlumniId], references: [id])
  receiverStudent     Student? @relation("StudentReceiverChats", fields: [receiverStudentId], references: [id])
}

model StudentData {
  id             String   @id @default(uuid())
  fullName       String
  graduationYear Int
  prn_number     String
}

model AlumniData {
  id             String   @id @default(uuid())
  fullName       String
  graduationYear Int
}

model Experience {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

 
  alumniId    String?
  alumni      Alumni?  @relation(fields: [alumniId], references: [id])
  
  studentId   String?
  student     Student? @relation(fields: [studentId], references: [id])
}
 