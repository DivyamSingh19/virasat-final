generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Branch {
  COMPUTER_ENGINEERING
  INFORMATION_TECHNOLOGY
  CSE_AI_ML
  ELECTRONICS_COMPUTER_SCIENCE
  MECHATRONICS_ENGINEERING
  HUMANITIES_BASIC_SCIENCES
  BACHELOR_OF_FINE_ART
}

enum Degree {
  BE
  ME
}
// ChatUser - references either a Student or Alumni
model ChatUser {
  id               String         @id @default(uuid())
  studentId        String?        @unique
  alumniId         String?        @unique
  streamUserId     String         @unique // Store the ID used in Stream.io
  student          Student?       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  alumni           Alumni?        @relation(fields: [alumniId], references: [id], onDelete: Cascade)
  
  
  channelMemberships ChannelMember[]
  
 
  createdChannels    ChatChannel[]  @relation("ChannelCreator")
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  
}

// ChatChannel model
model ChatChannel {
  id             String          @id @default(uuid())
  channelId      String          @unique // Stream's channel ID
  channelType    String          // e.g., "messaging", "team", etc.
  name           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  creatorId      String
  creator        ChatUser        @relation("ChannelCreator", fields: [creatorId], references: [id])
  members        ChannelMember[]

  @@index([creatorId])
}

model ChannelMember {
  id          String         @id @default(uuid())
  userId      String
  channelId   String
  joinedAt    DateTime       @default(now())
  role        String         @default("member") // Could be "admin", "member", etc.
  
  user        ChatUser       @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel     ChatChannel    @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

 
model Student {
  id              String       @id @default(uuid())
  username        String       @unique
  email           String       @unique
  fullName        String
  password        String
  prn_number      String
  branch          Branch
  graduationYear  Int          // Expected graduation year
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  bio             String?      @db.VarChar(600) // Max 600 characters
  githubProfile   String?
  linkedinProfile String?
  phoneNumber     String?      @unique
  skills          String[]     @db.VarChar(5)
  interests       String[]     @db.VarChar(5)  
  degree          Degree
  
  posts           Post[]
  forums          Forum[]
  comments        Comment[]  
  experiences     Experience[]
  
   
  chatUser        ChatUser?
}

 
model Alumni {
  id              String       @id @default(uuid())
  username        String       @unique
  email           String       @unique
  fullName        String
  password        String
  branch          Branch
  graduationYear  Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  bio             String?      @db.VarChar(600)
  githubProfile   String?
  linkedinProfile String?
  phoneNumber     String?      @unique
  skills          String[]     @db.VarChar(5)
  interests       String[]     @db.VarChar(5)  
  degree          Degree?
  
  posts           Post[]
  forums          Forum[]
  jobs            Job[]
  comments        Comment[]  
  experiences     Experience[]
  
   
  chatUser        ChatUser?
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  forums    Forum[]
  events    Event[]
  comments  Comment[]
}

model Event {
  id            String   @id @default(uuid())
  title         String
  description   String
  featuredImage String
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  isPaid        Boolean   @default(false)
  price         Float?    // Required if isPaid is true

  adminId       String
  admin         Admin    @relation(fields: [adminId], references: [id])
}

model Post {
  id            String   @id @default(uuid())
  title         String
  description   String
  featuredImage String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  studentId     String?
  alumniId      String?
  adminId       String?

  student       Student? @relation(fields: [studentId], references: [id])
  alumni        Alumni?  @relation(fields: [alumniId], references: [id])
  admin         Admin?   @relation(fields: [adminId], references: [id])

  comments      Comment[]
}

model Forum {
  id            String   @id @default(uuid())
  title         String
  content       String
  featuredImage String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  studentId     String?
  alumniId      String?
  adminId       String?

  student       Student? @relation(fields: [studentId], references: [id])
  alumni        Alumni?  @relation(fields: [alumniId], references: [id])
  admin         Admin?   @relation(fields: [adminId], references: [id])

  comments      Comment[]
}
 

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  company     String
  location    String
  salary      String
  expired     Boolean  @default(false)

  postedById  String
  postedBy    Alumni   @relation(fields: [postedById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  postId      String?
  forumId     String?

  studentId   String?
  alumniId    String?
  adminId     String?

  post        Post?    @relation(fields: [postId], references: [id])
  forum       Forum?   @relation(fields: [forumId], references: [id])

  student     Student? @relation(fields: [studentId], references: [id])
  alumni      Alumni?  @relation(fields: [alumniId], references: [id])
  admin       Admin?   @relation(fields: [adminId], references: [id])
}

 

model StudentData {
  prn_number     String @id @default(uuid())
  fullName       String 
  branch         String @default("Unknown") 
  graduationYear Int
   
}

model AlumniData {
      
  fullName       String @id @default(uuid())
  branch         String @default("Unknown")
  graduationYear Int
}

model Experience {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

 
  alumniId    String?
  alumni      Alumni?  @relation(fields: [alumniId], references: [id])
  
  studentId   String?
  student     Student? @relation(fields: [studentId], references: [id])
}
 